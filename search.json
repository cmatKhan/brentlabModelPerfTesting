[{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 brentlabModelPerfTesting authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Usage.html","id":"testing-a-single-model","dir":"Articles","previous_headings":"","what":"Testing a Single Model","title":"Usage","text":"note: interestingly, R initially launches, use available CPUs. However, CPUs, course execution, long enough, ’ll notice usage goes number CPUs assign XGboost command.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Usage.html","id":"cmd-line-interface","dir":"Articles","previous_headings":"Testing a Single Model","what":"Cmd line interface","title":"Usage","text":"Unfortunately, unlike python, R doesn’t easy way set cmd line interface R package automatically (eg, isn’t straight forward install brentlabModelPerfTesting, command line something like $ brentlabModelPerfTesting perf_test. python quite simple). likely reflects major use case R, interactive data exploration. , cmd line interface package – just extract . many ways . recognizable users : Install package. install ‘normally’, ’d use remotes::install_github. , package system dependency – requires linux system. don’t linux system, fear! can use singularity docker. going continue tutorial using singularity HPC runs Ubuntu 20.04. However, required – can install R ’re linux, use docker.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Usage.html","id":"pull-the-image","dir":"Articles","previous_headings":"","what":"Pull the image","title":"Usage","text":"Singularity can pull build docker images. Next, want extract cmd line scrpit package. ’re going entering container interactively. launch interactive shell, use following script. Copy file – call singularity_shell.sh – make executable (eg chmod +x singularity_shell.sh) Finally, can enter container. ’re container, launch R interaction session like : R session, : Exit singularity container cntrl-d Now, exit interactive session – going request another interactive session resources order initial round interactive testing. NOTE: large request shared system. interactive node meant testing prior submission scheduler. personal computer. Use cluster respectfully sparingly, everyone’s jobs run faster. particular, request sit resources screw around, go lunch, whatever else ’re using resources ’re hoarding. Request number cpus (12 less enough ) 1 gpu. command use: Ensure singularity loaded session. Also load htop – isn’t strictly necessary able use top without anything. htop prettier output: Like , ’re going use generalized singularity script. , one executes cmd container, rather launching interactive session. save following singularity_exec_gpu.sh. Make sure create , make executable (chmod +x singularity_exec_gpu.sh launch singularity_exec_gpu.sh /path//image.sif \"path//run_cmd.<ext>\" Now, fun part. can performance testing using cmd line script brentlabModelPerfTesting. First, let’s make sure script execute Note may singularity warnings. can almost certainly ignore , though know address underlay bind mount warning, ’d curious. Output cmd : means execute using preconfigured values CPU data available brentlabModelPerfTesting, just need execute script. output something like: time_sec tells long modelling step_ (data loading, etc) takes. memory output taken ballpark – better actual resource usage testing using single models SLURM. , sort boring. Let’s increase number CPUs use htop see . Submit command like following – make sure use & send background! – launch htop (top) watch command actually uses resources node: going take minute (probably bit less) get going – just wait. Eventually, ’ll see available CPUs light R starts executing job. Hit q quit htop. thing, using GPU instead, ’ll want significantly increase number rounds. GPU executes FAST! Watch load GPU – note system (HTCF), reason loading singularity interferes watch. can figure get around , yo update view GPU every half second: , system likely going easier just manually resubmit command throughout execution. suppose one thing might echo file keep trace execution, ’re interested. nvidia-smi output looks like toggle nvidia-smi htop (maybe screen session split terminal), ’ll notice GPU goes 100% makes use 1 CPU.","code":"# cd into your scratch space, make a directory for this project if you wish mkdir /scratch/<lab>/$USER/xgboost_testing cd /scratch/<lab>/$USER/xgboost_testing  # enter an interactive session interactive  # load singularity. make sure it is reasonably up to date eval $(spack load --sh singularityce@3.8.0)  # pull the image singularity pull docker://cmatkhan/brentlabxgboost:latest #!/bin/bash  img=$1  # replace <LAB> with the  # correct lab name! # NOTE: change the `-B` paths as appropriate for your use singularity shell \\   -B /scratch/<LAB>/$USER \\   -B /ref/<LAB>/data \\   -B \"$PWD\" \\   $img ./singularity_shell.sh /path/to/brentlabxgboost_latest.sif $ R library(brentlabModelPerfTesting)  cmd_line_script = system.file(   'xgboost_pref_testing.R',    package = 'brentlabModelPerfTesting')  # name of the file on your machine is arbitrary -- you choose # NOTE! this assumes that your $PWD is bound in the container  file.copy(cmd_line_script,\"./brentlabModelPerfTesting_perf.R\") srun --mem=30G --cpus-per-task=12 --gpus=1 -J perf_testing -p gpu --pty /bin/bash -l eval $(spack load --sh singularityce@3.8.0) #!/bin/bash  img=$1  run_cmd=$2  # MAKE SURE YOU FILL IN # <LAB> YOURSELF! singularity exec \\   --nv \\   -B /scratch/<LAB>/$USER \\   -B /ref/<LAB>/data \\   -B \"$PWD\" \\   $img \\   /bin/bash -c \"cd $PWD; $run_cmd\" ./scripts/singularity_exec_gpu.sh software/brentlabxgboost_latest.sif \"./your_machine/brentlabModelPerfTesting_perf.R --help\" Singularity> ./xgboost_testing/brentlabModelPerfTesting/inst/xgboost_pref_testing.R --help Usage: ./xgboost_testing/brentlabModelPerfTesting/inst/xgboost_pref_testing.R [options]   Options:     -h, --help         Show this help message and exit      -v, --verbose         Print extra output [default]      --input=/PATH/TO/INPUT.RDS         you do not have to set this to use the brentlabModelPerfTesting package test data. This default data is a 1300 x 81822. default label_colname, see below, is set to default to the appropriate response label for this data. Otherwise, set a path to a rds file of a data.frame where the first column is an expression vector the rest of the columns are snp vectors. rows are samples      --label_colname=ENSG00000183117_19         name of the column in the input data to use as the response vector. Default is  set for the default package input data      -g, --gpu         set --gpu to use the gpu_hist method. otherwise, cpu      --cpu=5         number of threads. Ignored if --gpu is set      --rounds=10         xgboost rounds parameter      --max_bin=10         xgboost max_bin parameter      --max_depth=10         xgboost max_depth parameter      --num_features=-1         number of features to include. Default is -1, which will include all avail      --out         set --out to write a csv with the performance time and memory results      --prefix=''         prefix to append to results. Default is none. if --out is set, set --prefix to some string to add something,  eg param_10_10_2_result.csv ./scripts/singularity_exec_gpu.sh software/brentlabxgboost_latest.sif \"./relative/path/to/brentlabModelPerfTesting_perf.R\" & Singularity> ./xgboost_testing/brentlabModelPerfTesting/inst/xgboost_pref_testing.R   time_sec model_ram_mb total_mem_used_gb 1 3.263443          2.5                 1 # make sure the & is there to submit to the background ./scripts/singularity_exec_gpu.sh software/brentlabxgboost_latest.sif \"./relative/path/to/brentlabModelPerfTesting_perf.R --cpus 11 --rounds 100\" & ./scripts/singularity_exec_gpu.sh software/brentlabxgboost_latest.sif \"./relative/path/to/brentlabModelPerfTesting_perf.R --gpu --rounds 1000\" & watch -n 0.5 nvidia-smi nvidia-smi +-----------------------------------------------------------------------------+ | Processes:                                                                  | |  GPU   GI   CI        PID   Type   Process name                  GPU Memory | |        ID   ID                                                   Usage      | |=============================================================================| |    0   N/A  N/A    947887      C   /usr/lib/R/bin/exec/R            2932MiB | +-----------------------------------------------------------------------------+ [chasem@n097 chasem]$ nvidia-smi Wed Feb 15 08:55:20 2023        +-----------------------------------------------------------------------------+ | NVIDIA-SMI 525.60.13    Driver Version: 525.60.13    CUDA Version: 12.0     | |-------------------------------+----------------------+----------------------+ | GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC | | Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. | |                               |                      |               MIG M. | |===============================+======================+======================| |   0  NVIDIA A100 80G...  Off  | 00000000:98:00.0 Off |                    0 | | N/A   49C    P0   174W / 300W |   2935MiB / 81920MiB |     96%      Default | |                               |                      |             Disabled | +-------------------------------+----------------------+----------------------+"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Usage.html","id":"interactive-r-session","dir":"Articles","previous_headings":"Pull the image","what":"Interactive R session","title":"Usage","text":"can also testing interactive R session. essentially : install package launch interactive session (probably Rstudio) library(brentlabModelPerfTesting) two functions available right now – can read , can get documentation ?prep_data. examples run – copy paste console/script/notebook execute. package comes along data, small test set, full 1300 sample ~82,000 SNP feature matrix. called gene_data_clean.rds. files inst available using method see extracting cmd line script, function examples extract test data.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Usage.html","id":"important","dir":"Articles","previous_headings":"Pull the image","what":"IMPORTANT","title":"Usage","text":"using GPU interactive R session, automatically release resources end/restart session. don’t know , watch nividia-smi, ’ll notice session process just sits GPU, even execution completes. gc() doesn’t clear . suspect far better execute types jobs via cmd line/SBATCH.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Usage.html","id":"submission-rate-testing","dir":"Articles","previous_headings":"","what":"Submission rate testing","title":"Usage","text":"’m just going put scripts . Please update bind paths, paths point directories/files rather mine. Feel free copy singularity image, course.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Usage.html","id":"typical-array-job","dir":"Articles","previous_headings":"Submission rate testing","what":"Typical array job","title":"Usage","text":"can adapt cmd line instructions tihs differently, rate testing: used script ‘template’: adjusted parameters necessary, eg run gpu testing, change SBATCH resource requests : IMPORTANT remember set --nv flag singularity command, remove --cpu cmd brentlabxgboost cmd add --gpu flag. submit scripts just run model like :","code":"#!/bin/bash  #SBATCH --mem=10G #SBATCH --cpus-per-task=8 #SBATCH --time=10 #SBATCH --job-name=rate_testing #SBATCH --output=rate_testing.out  eval $(spack load --sh singularityce@3.8.0)  singularity_image=$1  run_script=/scratch/mblab/chasem/xgboost_testing/brentlabModelPerfTesting/inst/xgboost_pref_testing.R  # num_trees == rounds rounds=10000 # 256 is default max_bin=256 # default is 6 max_depth=2 features=10000  singularity exec \\   -B /scratch/mblab \\   -B \"$PWD\" \\   $singularity_image \\   /bin/bash -c \"cd $PWD;   $run_script --cpu 7 --rounds $rounds --max_bin $max_bin --max_depth $max_depth --num_features $features\" #SBATCH -p gpu #SBATCH -n 1 #SBATCH --gpus=1 #SBATCH --mem=10G #SBATCH --time=10 #SBATCH --job-name=rate_testing_gpu #SBATCH --output=rate_testing_gpu.out sbatch --array=1-1000 /path/to/submit.sh /path/to/image.sif"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Usage.html","id":"chunked-submission","dir":"Articles","previous_headings":"Submission rate testing","what":"Chunked submission","title":"Usage","text":"two scripts – first sets singularity environment, second executes bash loop execute number sequential tasks. scripts used:","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Usage.html","id":"main-process","dir":"Articles","previous_headings":"Submission rate testing > Chunked submission","what":"Main Process","title":"Usage","text":"","code":"#!/bin/bash  #SBATCH -p gpu #SBATCH -n 1 #SBATCH --gpus=1 #SBATCH --mem=10G #SBATCH --time=10 #SBATCH --job-name=rate_testing_gpu #SBATCH --output=rate_testing_gpu.out  eval $(spack load --sh singularityce@3.8.0)  run_script=$1  singularity_image=$2  chunk_size=$3  singularity exec \\   --nv \\   -B /scratch/mblab \\   -B \"$PWD\" \\   $singularity_image \\   /bin/bash -c \"cd $PWD; $run_script $chunk_size $SLURM_ARRAY_TASK_ID\""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Usage.html","id":"chunk-runner","dir":"Articles","previous_headings":"Submission rate testing > Chunked submission","what":"Chunk runner","title":"Usage","text":"","code":"#!/bin/bash  # this is intended to wrap a single task' in the for loop. # the purpose is to control how many 'tasks' get executed  # in a single resource requests. # for example, if you need to run 1000 tasks, and you want  # to run 10 tasks sequentially per resource request, then  # you would do: # # ./chunk_submission.sh 10 <iteration number> #  # where <iteration number> comes from the parent sbatch  # submission.  chunk_size=$1 iteration_num=$2  run_script=/scratch/mblab/chasem/xgboost_testing/brentlabModelPerfTesting/inst/xgboost_pref_testing.R  # num_trees == rounds rounds=10000 # 256 is default max_bin=256 # default is 6 max_depth=2 features=10000  START=$(( ($iteration_num - 1) * $chunk_size + 1)); STOP=$(( $START + $chunk_size - 1 ));  for line_num in $( seq $START $STOP ); do     #echo $line_num      $run_script \\         --gpu \\         --rounds $rounds \\         --max_bin $max_bin \\         --max_depth $max_depth \\         --num_features $features done"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Using_Package_Data.html","id":"using-inst","dir":"Articles","previous_headings":"","what":"Using inst/","title":"Using_Package_Data","text":"installing package, files available like : concrete example","code":"test_data = readRDS(   system.file('<name of file>',           package = 'brentlabModelPerfTesting')) test_data = readRDS(   system.file('testing_gene_data.rds',           package = 'brentlabModelPerfTesting'))  head(test_data) #> # A tibble: 6 × 20 #>   ensg00000183…¹ x1935…² x1935…³ x1935…⁴ x1935…⁵ x1935…⁶ x1935…⁷ x1935…⁸ x1935…⁹ #>            <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> #> 1           2.32       0       0       0       0       0       0       0       0 #> 2           2.63       0       0       0       0       0       0       0       0 #> 3          47.1        0       0       0       0       0       0       0       0 #> 4           2.02       0       0       0       0       0       0       0       0 #> 5           1.56       0       0       0       0       0       0       0       0 #> 6           4.70       0       0       0       0       0       0       0       0 #> # … with 11 more variables: x1935631 <dbl>, x1935696 <dbl>, x1935797 <dbl>, #> #   x1935819 <dbl>, x1935887 <dbl>, x1935904 <dbl>, x1935955 <dbl>, #> #   x1935992 <dbl>, x1935993 <dbl>, x1936035 <dbl>, x1936227 <dbl>, and #> #   abbreviated variable names ¹​ensg00000183117_19, ²​x1935406, ³​x1935415, #> #   ⁴​x1935433, ⁵​x1935521, ⁶​x1935546, ⁷​x1935563, ⁸​x1935574, ⁹​x1935625"},{"path":[]},{"path":[]},{"path":[]},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Using_Package_Data.html","id":"in-your--libpath","dir":"Articles","previous_headings":"","what":"in your .libPath()","title":"Using_Package_Data","text":".rds files directory data.frames (tibble data.frame) – read readRDS, ’ll data.frame memory. NOTE: SNP matricies better stored operated sparse matricies – essentially matricies column vectors (R column-major default) stored run length encoding compress long strings 0s. modeling softwares – XGBoost one – accept sparse matricies input. done testing , yet.","code":"list.files(system.file(package = 'brentlabModelPerfTesting')) #>  [1] \"cpu_gpu_perf_results.rds\" \"DESCRIPTION\"              #>  [3] \"gene_data_clean.rds\"      \"help\"                     #>  [5] \"html\"                     \"INDEX\"                    #>  [7] \"LICENSE\"                  \"Meta\"                     #>  [9] \"NAMESPACE\"                \"R\"                        #> [11] \"README.md\"                \"slurm-simple.tmpl\"        #> [13] \"testing_gene_data.rds\"    \"xgboost_pref_testing.R\""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Using_Package_Data.html","id":"cpu_gpu_perf_results-rds","dir":"Articles","previous_headings":"","what":"cpu_gpu_perf_results.rds","title":"Using_Package_Data","text":"data.frame contains performance results testing various numbers CPUs GPU varying number features, number rounds, max_depth max_bin.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Using_Package_Data.html","id":"gene_data_clean-rds","dir":"Articles","previous_headings":"","what":"gene_data_clean.rds","title":"Using_Package_Data","text":"1300 subject 81,822 feature matrix. first column ensg00000183117_19 represents expression gene 1300 subjects. rest columns SNP vectors – mostly 0s, representing REF genotype SNP. 1 represents ALT – names like x1935887 (note: R doesn’t like numeric column names since easy confuse column index. Hence, ‘clean’ R data.frame add x numerically named columns).","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Using_Package_Data.html","id":"slurm-simple-tmpl","dir":"Articles","previous_headings":"","what":"slurm-simple.tmpl","title":"Using_Package_Data","text":"simple slurm template use future.batchtools","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Using_Package_Data.html","id":"testing_gene_data-rds","dir":"Articles","previous_headings":"","what":"testing_gene_data.rds","title":"Using_Package_Data","text":"20 x 20 subset first 20 columns/rows gene_data_clean","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/Using_Package_Data.html","id":"xgboost_perf_testing-r","dir":"Articles","previous_headings":"","what":"xgboost_perf_testing.R","title":"Using_Package_Data","text":"executable cmd line script intended used performance test XGBoost (see function ?brentlabModelPerfTesting::perf_test_xgboost, reference docs details). example using script container Usage section docs","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"user-setup","dir":"Articles","previous_headings":"","what":"User setup","title":"fully_featured_R_package_development","text":"absolute minimum, read Hadley Wickam Jenny Bryan’s R packages’ section Whole Game. also least skim rest book. ’ll use reference frequently need know . skimming Wickam/Bryan R packages book section documentation, also skim Roxygen2 documentation. Documenting code important, easier done write leaving later. Finally, need aware common code style standards. can choose break rules, reason, due ignorance common conventions. suggest looking either tidyverse style guide Google R style guide. two almost exactly . instance, reference source.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"system-requirements","dir":"Articles","previous_headings":"","what":"System Requirements:","title":"fully_featured_R_package_development","text":"date R date Rstudio date usethis (main R development tools meta-package) date renv (similar python venv function, though seemingly conventions implementation) make directory called code projects $HOME. typically put projects intend packaged, src code pull internet, code, projects strictly focused analysis going formally packaged projects Set Rstudio environment Set default working directory location thaty choose opposed default. set mine $HOME/projects. Uncheck boxes – probably right underneath default directory setting box – say anything along lines “Save session data exit” “save Rdata automatically”, … – anything like , turn . Go Appearance tab. prefer Ubuntu mono editor font, Tomorrow night editor theme. also isn’t necessary, find inverted color scheme lot easier eyes. ’re going spend good amount time Rstudio – look around rest options, eg window arrangement tab, see can customize preferences. Exit Rstudio, re-launch – now getwd(), ’ll see Rstudio launches default location choice, looks better.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"create-the-package-skeleton","dir":"Articles","previous_headings":"","what":"Create the package skeleton","title":"fully_featured_R_package_development","text":"Despite preferring $HOME/projects default launch location, ’m going make project – since intended packaged software – $HOME/code directory. Create project skeleton usethis. launch new window current working directory set path specified. can see top right corner Rstudio session.","code":"# note: the name of the package will be the basename of this path. # I am putting this in my $HOME/code directory usethis::create_package('~/code/brentlabModelPerfTesting')"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"set-up-a-bunch-of-boilerplate","dir":"Articles","previous_headings":"","what":"Set up a bunch of boilerplate","title":"fully_featured_R_package_development","text":"Next, ’re going set bunch ‘boilerplate’ package code","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"add-a-readme-md-file","dir":"Articles","previous_headings":"Set up a bunch of boilerplate","what":"Add a README.md file","title":"fully_featured_R_package_development","text":"usethis::use_readme_md() (use_readme_rmd wish. prefer md b/c simpler)","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"also-add-an-index-md","dir":"Articles","previous_headings":"Set up a bunch of boilerplate > Add a README.md file","what":"Also add an index.md","title":"fully_featured_R_package_development","text":"pkgdown documentation – README.md displayed github, pkgdown use index.md file preferentially homepage – way documentation homepage can different github homepage README. need anything now, though put ‘hello world’ line (just markdown document) want","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"add-a-license","dir":"Articles","previous_headings":"Set up a bunch of boilerplate","what":"Add a license","title":"fully_featured_R_package_development","text":"Set license – can read licenses want. generally use MIT license, intended permissive possible. just considered good practice, easily done: usethis::use_mit_license(). look licenses available, eg use_gnu_license(), care things.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"update-the-initial-description-fields","dir":"Articles","previous_headings":"Set up a bunch of boilerplate","what":"Update the initial DESCRIPTION fields","title":"fully_featured_R_package_development","text":"Update author, title description fields DESCRIPTION file","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"start-your-virtual-environment","dir":"Articles","previous_headings":"Set up a bunch of boilerplate","what":"Start your virtual environment","title":"fully_featured_R_package_development","text":"renv::init(). Note: renv nearly intuitive simple python venv. responsibility learn use renv, expect ’re going need spend time . alternative renv packrat, though Posit/Rstudio seems chosen renv main virtual environment management platform. Frequently check renv::status() frequently renv::snapshot() necessarily renv::install('package'). Note happens addition using usethis::use_package('package', type='<type>', min_version = <TRUE/<specific_version>>). critical figure difference two – read documentation first, play around , questions, post question appropriate boards (see documentation usethis renv. tells ask questions).","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"gitgithub","dir":"Articles","previous_headings":"Set up a bunch of boilerplate","what":"Git/github","title":"fully_featured_R_package_development","text":"Note: everything add .gitignore, may also want add .Rbuildignore eventually .dockerignore package, console, usethis::use_git() go repo maintained Github copy/paste (wget whatever) R project .gitignore template project .gitignore file doesn’t really matter, just look .gitignore now remove duplicates items usethis includes default. also point add tmp directory package workspace, ’ll store temporary development data, scripts, etc local, don’t want version controlled pushed github, add .gitignore. add directory, docs/ .gitignore Note: can also add .gitignore template create git repo interface. Go github account create repo. name repo name package, though required. Follow directions git add local repo github can, don’t yet make first push – following first","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"set-up-your-test-environment","dir":"Articles","previous_headings":"Set up a bunch of boilerplate > Git/github","what":"Set up your test environment","title":"fully_featured_R_package_development","text":"usethis::use_testthat() Set basic function test – later section . , just want make sure boiler plate actually run. following: usethis::use_r('init_function') open file R/init_function.R. active window, enter usethis::use_test(), create test init_function. Note: don’t need write anything init_function.R script, actual function, ’re going delete . just needs test suite runs passes (test suite fills passing test default)","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"set-up-pkgdown-and-gh-pages","dir":"Articles","previous_headings":"Set up a bunch of boilerplate > Git/github","what":"Set up pkgdown and gh-pages","title":"fully_featured_R_package_development","text":"usethis::use_pkgdown_github_pages() create gh-pages branch github repo. documentation get built served github didn’t already , add docs/ .gitignore – don’t watch VC docs/ main branch. IMPORTANT order allow github action update gh-pages branch, need change branch security setting github. github repo page, following: Go : Settings –> Actions –> general –> Workflow permissions set permissions ‘Read Write’","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"set-up-the-initial-dockerfile","dir":"Articles","previous_headings":"Set up a bunch of boilerplate > Git/github","what":"Set up the initial dockerfile","title":"fully_featured_R_package_development","text":"create file called (convention) Dockerfile (convention – must called ) .dockerignore. Add anything .dockerignore dont want included dockerfile – use .github, thoughtful sense, maybe peoples’ .dockerignore files guides. important: add Dockerfile .Rbuildignore. ’m going try note things like , might miss . thinking ignored , , package build check (explained couple steps now), forgetting things like caught. can fix check step, . one use. used blindly. guide intended sophisticated users. Read dockerfile, read docker docs, go ahead try , something isn’t working , figure debug now. typo improvement template/example, please submit pull request. Now check can actually build image. Debug necessary. Rstudio integrated terminal, terminal system works without error, great! need anything else now.","code":"# get the base image, the rocker/verse has R, RStudio and pandoc FROM r-base # Get and install system dependencies  ENV RENV_VERSION 0.16.0 RUN R -e \"install.packages(c('remotes'), repos = c(CRAN = 'https://cran.wustl.edu'))\" RUN R -e \"remotes::install_github('rstudio/renv@${RENV_VERSION}')\"  RUN  apt-get update && \\      apt-get install -y --no-install-recommends \\       software-properties-common \\       dirmngr \\       wget \\         build-essential \\         libssl-dev \\         libxml2-dev \\       libcurl4-openssl-dev  # Clean up RUN apt-get autoremove -y  WORKDIR /project COPY renv.lock renv.lock COPY renv/ renv/  COPY .Rprofile .Rprofile COPY renv/activate.R renv/activate.R COPY renv/settings.dcf renv/settings.dcf  # note: update this path as necessary based no the r-base r version # and what you make your WORKDIR ENV R_LIBS /project/renv/library/R-4.2/x86_64-pc-linux-gnu  RUN R -e \"renv::restore()\"  WORKDIR /project/src COPY . . WORKDIR /project RUN R -e \"renv::activate();renv::install('./src', dependencies = TRUE)\" RUN rm -rf src  ##### METHOD 2 install from github releases using remotes::install_github ##### # # You can skip the renv portion and just use remotes::install_github(..., dependencies=TRUE) docker build -t <your dockerhub username>/brentlabmodelperftesting ."},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"set-up-ci-for-the-build-check-documentation-construction-and-coverage","dir":"Articles","previous_headings":"Set up a bunch of boilerplate > Git/github","what":"Set up CI for the build check, documentation construction, and coverage","title":"fully_featured_R_package_development","text":"page linked usethis::use_github_actions, gives full list available pre-configured CI github actions jobs can add project R CMD check build multiple operating systems Read ?usethis::use_github_actions documentation. don’t know CI , go read figure . don’t konw R CMD Check means, look Wickam/Bryan R package book. Otherwise, choose poison . use_github_action_check_standard() likely generally one want. case, interested testing package linux, ’m going choose use_github_action_check_release() Add R CMD Check badge: usethis::use_github_actions_badge() usethis::use_coverage('codecov') installs covr track test coverage code. output installs, last bit badge add README.md index.md wish running cmd , run usethis::use_github_action(\"test-coverage\") coverage report also run pushes/pulls main usethis::use_github_actions('pkgdown'): Automatically build docs gh-pages","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"adjust-the-ci-to-work-with-renv","dir":"Articles","previous_headings":"Set up a bunch of boilerplate > Git/github","what":"Adjust the CI to work with renv","title":"fully_featured_R_package_development","text":"general, default CI work. , end using renv handle complicated dependencies (e.g., precompiled--gpu capability linux based XGBoost distribution ’ll using), ’ll want use renv rather pak build environment CI. Go .github/workflows directory. files look like using renv – gets similar adjustment. Note: guide unsophisticated users. Getting virtual environment, CI, Dockerfile, etc work tasks require level understanding ability beyond novice, probably beyond intermediate level. doesn’t run , always consider pull request update fix documentation. Otherwise, go figure . documentation one items, help community message boards. expecting don’t copy/paste blindly, actually look , look usethis default CI scripts, understand changed.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"r-cmd-check","dir":"Articles","previous_headings":"Set up a bunch of boilerplate > Git/github > Adjust the CI to work with renv","what":"R CMD Check","title":"fully_featured_R_package_development","text":"","code":"# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples # Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help on:   push:     branches: [main, master]   pull_request:     branches: [main, master]  name: R-CMD-check  jobs:   R-CMD-check:     runs-on: ${{ matrix.config.os }}      name: ${{ matrix.config.os }} (${{ matrix.config.r }})          # note: I removed the DEV ubuntu release b/c it failed -- I'm not      # interested in this case in ensuring that this package runs on      # a dev branch of ubuntu     strategy:       fail-fast: false       matrix:         config:           - {os: ubuntu-latest,   r: 'release'}           - {os: ubuntu-latest,   r: 'oldrel-1'}      env:       GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}       R_KEEP_PKG_SOURCE: yes       # this needs to be added        RENV_PATHS_ROOT: ~/.local/share/renv      steps:        - uses: actions/checkout@v3        - uses: r-lib/actions/setup-pandoc@v2        - uses: r-lib/actions/setup-r@v2         with:           r-version: ${{ matrix.config.r }}           http-user-agent: ${{ matrix.config.http-user-agent }}           use-public-rspm: true            # setup-r-dependencies is removed !      # instead, we're handling dependencies with renv       - name: Cache packages         uses: actions/cache@v1         with:           path: ${{ env.RENV_PATHS_ROOT }}           key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}           restore-keys: |             ${{ runner.os }}-renv-            # note! have to add the rcmdcheck install       - name: Restore packages         shell: Rscript {0}         run: |           if (!requireNamespace(\"renv\", quietly = TRUE)) install.packages(\"renv\")           renv::restore()           renv::install('rcmdcheck')        - uses: r-lib/actions/check-r-package@v2         with:           upload-snapshots: true"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"pkgdown","dir":"Articles","previous_headings":"Set up a bunch of boilerplate > Git/github > Adjust the CI to work with renv","what":"pkgdown","title":"fully_featured_R_package_development","text":"","code":"# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples # Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help on:   push:     branches: [main, master]   pull_request:     branches: [main, master]   release:     types: [published]   workflow_dispatch:  name: pkgdown  jobs:   pkgdown:     runs-on: ubuntu-latest     # Only restrict concurrency for non-PR jobs     concurrency:       group: pkgdown-${{ github.event_name != 'pull_request' || github.run_id }}     env:       GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}       RENV_PATHS_ROOT: ~/.local/share/renv     steps:       - uses: actions/checkout@v3        - uses: r-lib/actions/setup-pandoc@v2        - uses: r-lib/actions/setup-r@v2         with:           use-public-rspm: true        - name: Cache packages         uses: actions/cache@v1         with:           path: ${{ env.RENV_PATHS_ROOT }}           key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}           restore-keys: |             ${{ runner.os }}-renv-        - name: Restore packages         shell: Rscript {0}         run: |           if (!requireNamespace(\"renv\", quietly = TRUE)) install.packages(\"renv\")           renv::restore()           renv::install('.')        - name: Build site         run: pkgdown::build_site_github_pages(new_process = FALSE, install = FALSE)         shell: Rscript {0}        - name: Deploy to GitHub pages 🚀         if: github.event_name != 'pull_request'         uses: JamesIves/github-pages-deploy-action@v4.4.1         with:           clean: false           branch: gh-pages           folder: docs"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"coverage","dir":"Articles","previous_headings":"Set up a bunch of boilerplate > Git/github > Adjust the CI to work with renv","what":"coverage","title":"fully_featured_R_package_development","text":"","code":"# Workflow derived from https://github.com/r-lib/actions/tree/v2/examples # Need help debugging build failures? Start at https://github.com/r-lib/actions#where-to-find-help on:   push:     branches: [main, master]   pull_request:     branches: [main, master]  name: test-coverage  jobs:   test-coverage:     runs-on: ubuntu-latest     env:       GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}       RENV_PATHS_ROOT: ~/.local/share/renv      steps:       - uses: actions/checkout@v3        - uses: r-lib/actions/setup-r@v2         with:           use-public-rspm: true        - name: Cache packages         uses: actions/cache@v1         with:           path: ${{ env.RENV_PATHS_ROOT }}           key: ${{ runner.os }}-renv-${{ hashFiles('**/renv.lock') }}           restore-keys: |             ${{ runner.os }}-renv-        - name: Restore packages         shell: Rscript {0}         run: |           if (!requireNamespace(\"renv\", quietly = TRUE)) install.packages(\"renv\")           renv::restore()        - name: Test coverage         run: |           covr::codecov(             quiet = FALSE,             clean = FALSE,             install_path = file.path(Sys.getenv(\"RUNNER_TEMP\"), \"package\")           )         shell: Rscript {0}        - name: Show testthat output         if: always()         run: |           ## --------------------------------------------------------------------           find ${{ runner.temp }}/package -name 'testthat.Rout*' -exec cat '{}' \\; || true         shell: bash        - name: Upload test results         if: failure()         uses: actions/upload-artifact@v3         with:           name: coverage-test-failures           path: ${{ runner.temp }}/package"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"important-snapshot-your-local-environment","dir":"Articles","previous_headings":"Set up a bunch of boilerplate > Git/github","what":"IMPORTANT snapshot your local environment","title":"fully_featured_R_package_development","text":"Now need update virtual environment","code":"# shows what you've installed locally for this environment renv::status()  # creates the lockfile renv::snapshot()"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"check-your-main-branch-locally","dir":"Articles","previous_headings":"Set up a bunch of boilerplate > Git/github","what":"Check your main branch locally","title":"fully_featured_R_package_development","text":"Review .Rbuildignore make sure ignored need ignore. Hidden files believe ignored default – check docs – , made tmp directory, add .Rbuildignore. Go “Build” tab “Environment” window Rstudio. Click “Check” button. runs devtools::check() (comes along usethis), hood runs R CMD check. * * run quickly errors warnings, since haven’t installed anything. errors warnings, need stop fix . haven’t developed R package , never used button, get used . clicking frequently develop, even though take time execute. git add, commit, push main Note: make sure add hidden files .gitignore, .Rprofile, .github, .Rbuildignore .gitignore go github, click “Actions” tab, make sure CI actions actually runs. doens’t run now, completely empty package, easier fix now later.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"create-a-dev-branch-and-develop","dir":"Articles","previous_headings":"Set up a bunch of boilerplate","what":"Create a dev branch and develop","title":"fully_featured_R_package_development","text":"just develop push main. However, really, really useful keep main branch actually works. instance, right now, renv, dockerfile, CI pkgdown/gh-pages work. might something breaks one , debugging easy. able revert working version, slowly re-integrate changes figure causing bug far easier making big push main, breaking things, rolling back git history main opinion. ’re ready merge dev main, point bump semantic versioning (may choose throughout dev branch developments – lots different methods ), rebuild container(s), create ‘release’ github. updated CHANGELOG goes along version bump. instructions aren’t immediately clear obvious, need stop go read documentation watch youtube videos BASIC git/github usage. fundamental skill programming today, time.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"writing-code","dir":"Articles","previous_headings":"","what":"Writing code","title":"fully_featured_R_package_development","text":"First, aren’t writing tests along code, especially preconceived notions tests , get rid . ’re probably wrong. point tests create reproducible debugging environment , others, develop codebase beyond first function. allows , another developer, easily least call function, set breakpoint first line, step line line instead relying (probably shitty) documentation, developer can actually see code explicitely . tests also serve integration checks – add new function, break old function. tests don’t guarantee true, good check even shouldn’t trust blindly passing test bulletproof guarantee quality. something really always need think . Finally, want test suite provide assurance code correct works, improving tests time lifetime---software goal – making tests now serve starting point something can iteratively improved future.","code":""},{"path":[]},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"know-what-youre-doing","dir":"Articles","previous_headings":"Writing code > Before writing any code","what":"Know what you’re doing","title":"fully_featured_R_package_development","text":"started entire process, knew goals specific software . don’t, stop go figure first. know purpose software , also know ‘basic fundamental’ tasks software , input data look like , developer, decide input output . decided anyone else, data. decide.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"get-some-development-data","dir":"Articles","previous_headings":"Writing code > Before writing any code","what":"Get some development data","title":"fully_featured_R_package_development","text":"anything else, need get data can use development. minimal reasonable actually write code need write. Put data put either inst tmp – put inst, can make data available package distributed. put tmp, added various ignore files, can prevent sharing data outside local development space. useful lazy subset development data initially just want take expedient stick initially.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"know-basic-style-conventions","dir":"Articles","previous_headings":"Writing code > Before writing any code","what":"Know basic style conventions","title":"fully_featured_R_package_development","text":"Read least 1 style guides linked User setup. Follow style guide terms organizing code. preference many, short code files less divided function /object name function class contains. R conventions surrounding filenames – eg, Clases.R, methods.R, zzz.R – can get kind information CRAN documentation packaging, also Hadley/Bryan book. Use linter package styler commonly used R linter. Install ","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"set-up-a-test-when-you-set-up-a-classfunction-script","dir":"Articles","previous_headings":"Writing code","what":"Set up a test when you set up a class/function script","title":"fully_featured_R_package_development","text":"going follow convention 1 file 1 function, name. open file called R/prep_data.R. Now call usethis::use_test() , current active window prep_data.R, create test file. test, least set input. writing anything else, test, : function, might now write something like – Note start writing documentation now! Also, handle importing packages, using roxygen2 – @importFrom statement . can read Wickam/Bryan Packaging R book, roxygen2 docs. don’t know manage dependencies way, need stop go read now. run test via panel ran check. Maybe works, maybe doesn’t, least now framework can make developing reproducible.","code":"test_that(\"prepare_data\", {      # this is my development data, which I put in the `inst/` directory    # where it will be installed, along with the package, when the package    # is installed. This is how you access that data. Note that part of the    # test suite is doing `library(<your package>)` prior to this -- `usethis`    # handled this for you, so you don't see it in the actual specific test   test_data = readRDS(     system.file('testing_gene_data.rds',                 package = 'brentlabXGBoost'))      # I haven't written anything in the prep_data function! This will fail    # until I do, which is a good thing.   actual = prep_data(test_data, 10)      # just placeholder for now   expected = head(test_data)      expect_identical(expected, actual) }) #' prep data for the testing functions #' #' @importFrom assertthat assert_that #' #' @param gene_data a data.frame where the label_vector column is the response #'   and the rest of the columns are predictors #' @param feature_num is the number of feature_num to select from the data. must be #'   $>=$ 1.If exceeds ncol, ncol-1 is used (1 col removed as the label). #'   Default is to use all columns #' @param label_vector name of the column to use as the response #' #' @export prep_data = function(     gene_data,     feature_num = Inf,     label_vector = 'ensg00000183117_19'){      assertthat::assert_that(is.numeric(feature_num))    assertthat::assert_that((label_vector) %in% colnames(gene_data))      # return this out -- this is just a placeholder for development   head(gene_data) }"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"interactive-development","dir":"Articles","previous_headings":"Writing code","what":"Interactive development","title":"fully_featured_R_package_development","text":"python, can use pip install -e . install development package src directory (one ’re working) changes make immediately present PYTHONPATH. R, can something similar devtools::load_all(). needs re-done time make change. now.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"set-a-breakpoint","dir":"Articles","previous_headings":"Writing code > Interactive development","what":"Set a breakpoint","title":"fully_featured_R_package_development","text":"prep_data, set breakpoint. Maybe set first line, code executed inside hte function, stop interactive environment can execute code/write/etc console actual function data.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"installing-dependencies","dir":"Articles","previous_headings":"Writing code > Interactive development","what":"Installing dependencies","title":"fully_featured_R_package_development","text":"install dependencies, ’re going use usethis::use_package. Read docs – able decide section package gets added (Imports, Suggests, Depends). typically set min_version = TRUE, put thought , generally. Important remember update virtual environment frequently – see changes, use renv::status(). update lockfile, renv::snapshot(). aware ’re – don’t fill environment bunch junk (though, , renv functions help clean things ).","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"installing-from-a-remote-other-than-cran-or-bioconductor","dir":"Articles","previous_headings":"Writing code > Interactive development > Installing dependencies","what":"Installing from a remote other than CRAN or Bioconductor","title":"fully_featured_R_package_development","text":"example, want package depend pre-compiled version XGBoost distributed XGBoost, CRAN. done: First, based Remotes documentation, add following DESCRIPTION file: , use renv install, case, xgboost – respect Remotes field DESCRIPTION. Next, use usethis add xgboost, case, DESCRIPTION Imports: usethis::use_package('xgboost', min_version=TRUE) Update virtual environment: renv::status() – just take look changed, make sure agree. renv::snapshot(). side note, renv.lock file entry xgboost looks like:","code":"Remotes:    xgboost=url::https://github.com/dmlc/xgboost/releases/download/v1.7.2/xgboost_r_gpu_linux_1.7.2.tar.gz ...     \"xgboost\": {       \"Package\": \"xgboost\",       \"Version\": \"1.7.2.1\",       \"Source\": \"URL\",       \"RemoteType\": \"url\",       \"RemoteUrl\": \"https://github.com/dmlc/xgboost/releases/download/v1.7.2/xgboost_r_gpu_linux_1.7.2.tar.gz\",       \"Hash\": \"d6328ccd7dbb29c1c1c285b045083e02\",       \"Requirements\": [         \"Matrix\",         \"data.table\",         \"jsonlite\"       ]     },  ..."},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"iterate-and-develop","dir":"Articles","previous_headings":"Writing code > Interactive development","what":"Iterate and develop","title":"fully_featured_R_package_development","text":"write, set breakpoint, execute breakpoint, write, critically simultaneously update test","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"result","dir":"Articles","previous_headings":"Writing code > Interactive development","what":"Result","title":"fully_featured_R_package_development","text":"process, end test looks like : function looks like :","code":"test_that(\"prepare_data\", {   test_data = readRDS(     system.file('testing_gene_data.rds',                 package = 'brentlabXGBoost'))    suppressWarnings({prepped_data_subset = prep_data(test_data, 10)})    expect_equal(dim(prepped_data_subset$train), c(20*.8,10))    suppressWarnings({prepped_data_default = prep_data(test_data)})    expect_equal(dim(prepped_data_default$train), c(20*.8,19)) }) #' prep data for the testing functions #' #' @importFrom assertthat assert_that #' @importFrom rsample initial_split training testing #' @importFrom xgboost xgb.DMatrix #' @importFrom dplyr select all_of #' @import futile.logger #' #' @param gene_data a data.frame where the label_vector column is the response #'   and the rest of the columns are predictors #' @param feature_num is the number of feature_num to select from the data. must be #'   $>=$ 1.If exceeds ncol, ncol-1 is used (1 col removed as the label). #'   Default is to use all columns #' @param label_vector name of the column to use as the response #' #' @return a list with xgboost data matrix objects, slots dtrain, dtest and wl #'   see the xgboost docs on wl. dtrain is the trainin data to #' #' @examples #'   test_data = readRDS( #'       system.file('testing_gene_data.rds', #'       package = 'brentlabXGBoost')) #'   # note: suppressed warnings used here b/c the test data is too #'   # small to stratify. Typically, do not use supressWarnings. #'   suppressWarnings({prepped_data_subset = brentlabXGBoost::prep_data(test_data, 10)}) #' #'   names(prepped_data_subset) #' #' @export prep_data = function(     gene_data,     feature_num = Inf,     label_vector = 'ensg00000183117_19'){    assertthat::assert_that(is.numeric(feature_num))    assertthat::assert_that((label_vector) %in% colnames(gene_data))    gene_data_split <- rsample::initial_split(     gene_data,     prop = 0.8,     strata = rlang::sym(label_vector)   )    feature_num = max(1,feature_num)    flog.info(paste0('creating train test data with ',             as.character(min(ncol(gene_data)-1, feature_num)),             ' predictor variables'))    # prepare the input data -- subset number of feature_num to   # test effect of feature_num on runtime/performance   train_dat = as.matrix(rsample::training(gene_data_split) %>%                           dplyr::select(-all_of(label_vector)) %>%                           .[,1:min(ncol(gene_data)-1, feature_num)])    test_dat = as.matrix(rsample::testing(gene_data_split) %>%                          dplyr::select(-all_of(label_vector))) %>%     .[,1:min(ncol(gene_data_split)-1,feature_num)]    # common for all test iterations -- not testing effect of number of samples   train_labels = training(gene_data_split)[[label_vector]]    test_labels = testing(gene_data_split)[[label_vector]]    # return data for xgboost input   list(     train = xgboost::xgb.DMatrix(train_dat, label = train_labels),     test = xgboost::xgb.DMatrix(test_dat, label=test_labels)   ) }"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"check-locally","dir":"Articles","previous_headings":"Writing code > Interactive development","what":"Check locally","title":"fully_featured_R_package_development","text":"tab Rstudio pane check, run Test tab – make sure pass first. Debug necessary. Check documentation format roxygen2::roxygenise(). Debug necessary. , run check locally (Environment/Build pane Rstudio), just boilerplate code. Debug necessary.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"push-to-github","dir":"Articles","previous_headings":"Writing code > Interactive development","what":"Push to github","title":"fully_featured_R_package_development","text":"push choice – dev branch, push dev. main, push main. Maybe merge dev main locally, push dev issue pull request main. github, CI run – make sure passes. doesn’t debug.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/fully_featured_R_package_development.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"fully_featured_R_package_development","text":"point, can look repo see ’ve done beyond – less just adding single additional function, writing cmd line interface (inst). see vignette Using_Package_Data comments including data project. See Usage instrutions using cmd line script container. See performance_testing_xgboost_on_htcf results performance testing varying parameters affect runtime/memory CPUs (various numbers cpus) GPU. also examines scheduling rate CPU GPU batch runs HTCF.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/performance_testing_xgboost_on_htcf.html","id":"application","dir":"Articles","previous_headings":"","what":"Application","title":"performance_testing_xgboost_on_htcf","text":"wish following: extract data genomic feature sample expression matrix extract data variant variant label VCF style file convert data modelling format clean prepare data – ie, deal NAs, drop zero variance features model matrix train model tune hyperparameters via grid search n-fold cross validation Output data downstream processing Current application requires done genes, means process must performed 10,000 20,000 genes, 10x hyperparameter tuning/cross validation.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/performance_testing_xgboost_on_htcf.html","id":"goal","dir":"Articles","previous_headings":"","what":"Goal","title":"performance_testing_xgboost_on_htcf","text":"flexible, repeatable, reproducible environment explore resource usage various models order use efficiently computing resources available.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/performance_testing_xgboost_on_htcf.html","id":"questions-and-answers","dir":"Articles","previous_headings":"","what":"Questions and Answers","title":"performance_testing_xgboost_on_htcf","text":"parameters affect runtime resource usage Number features course impact memory. However, can significantly reduced using sparse matrix data representations underlying software can handle . Average memory usage large model around 4GB - 6GB. opted 10GB SBATCH request. number rounds greatest effect runtime. given number rounds, number features greatest impact. max_bin max_depth little impact. 7 CPUs, runtime single model 3.6 minutes local. Interesting, variability cluster. GPU execution cluster, model settings, took 22 seconds. GPU therefore ~ 10x faster per model basis scheduling rate CPUs GPUs HTCF? CPUs 81k features, 1k rounds max_depth max_bin set 1000, scheduling rate CPU 30 jobs per minute. 10k feature model, 10k rounds, max_depth = 2 XGBoost default max_bin (256), scheduling rate 84 jobs per minute. means 10 fold cross validation 20,000 genes, (statistical theory based) speed-ups sharing data across folds (least available caret, possibly scikit-learn), runtime 1.6 days GPUs scheduling rate 81k features 1k rounds 8.13 per minute scheduling typical array job (1 model per resource request). occurred since model runs much faster, might possible speed runtime ‘batching’ jobs number models run sequentially per resource request. instance, run 1000 models, submit array job 100 tasks, one 100 tasks, 10 models run sequentially. However, didn’t improve per model execution rate – result 10 sequential tasks per submission ~6 jobs per minute. probably warrants investigation, however number options speed CPU execution, already comparatively fast, far easier implement result easier distribute software. Therefore, using GPUs scale HTCF genome scale work unlikely worthwhile returns terms runtime optimization.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/performance_testing_xgboost_on_htcf.html","id":"conclusion","dir":"Articles","previous_headings":"","what":"Conclusion","title":"performance_testing_xgboost_on_htcf","text":"‘full’ genomic scale tasks, due high level concurrency afforded many CPUs general compute partition, generally faster use CPUs. However, possible chunking jobs, multiple models run sequentially per resource request, runtime reduced utilizing GPUs modelling task. single small number model tasks – eg, EDA genes different expression characteristics, exploring outlier-y models full scale genome run – using GPU ~ 10x faster using CPU. said, cluster isn’t personal computer. Submit jobs via sbatch. Don’t just sit resources.","code":""},{"path":[]},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/performance_testing_xgboost_on_htcf.html","id":"run-time-and-memory-on-cpus-and-gpus-single-gene-model","dir":"Articles","previous_headings":"Details","what":"Run time and memory on CPUs and GPU(s) – single gene model","title":"performance_testing_xgboost_on_htcf","text":"parameters interest affect run time memory usage: number features number trees number rounds case, want vary either number CPUs, run models GPU(s).","code":""},{"path":[]},{"path":[]},{"path":[]},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/performance_testing_xgboost_on_htcf.html","id":"submission-rate","dir":"Articles","previous_headings":"Details","what":"Submission rate","title":"performance_testing_xgboost_on_htcf","text":"optimal CPU request seems 3 7 CPUs. 7 offers significantly decreased improvement. Closer 7 likely best, smaller resource requests typically increase job submission rate, impacts concurrency – ’ve seen, huge impact runtime. test submission rate cluster, containerized virtual environment (including package), wrote cmd line interface can accessed installed package like : inst directory github repo. submitted like CPU execution submission cmd test GPU, three items need changed SBATCH submission resource requests singularity flag --nv must set set --gpu flag cmd line script clear modify sbatch submission grid search , case, parameters affect run time memory usage. Just create data.frame (expand.grid R. long discussion python. ’d check numpy, ). However , write tsv: Include line sbatch script :","code":"system.file('xgboost_perf_testing.R', package = 'brentlabModelPerfTesting') #!/bin/bash  #SBATCH --mem=10G #SBATCH --cpus-per-task=8 #SBATCH --time=10 #SBATCH --job-name=rate_testing #SBATCH --output=rate_testing.out  eval $(spack load --sh singularityce@3.8.0)  singularity_image=$1  run_script=/scratch/mblab/chasem/xgboost_testing/brentlabModelPerfTesting/inst/xgboost_pref_testing.R  rounds=10000 max_bin=256 max_depth=2  singularity exec \\   -B /scratch/mblab \\   -B \"$PWD\" \\   $singularity_image \\   /bin/bash -c \"cd $PWD;   $run_script --cpu 7 --rounds $rounds --max_bin $max_bin --max_depth $max_depth\" sbatch --array=1-1000 submit.sh ../software/brentlabxgboost_latest.sif #SBATCH -p gpu #SBATCH --gpus=1 #SBATCH --mem=10G #SBATCH --time=10 #SBATCH --job-name=rate_testing #SBATCH --output=rate_testing.out  # ... same as above  # note that new --nv flag! singularity exec \\   --nv  \\   -B /scratch/mblab \\   -B \"$PWD\" \\  $run_script --gpu --rounds $rounds --max_bin $max_bin --max_depth $max_depth\" cpu_testing_grid = expand.grid(   features = c(1000,10000,ncol(gene_data)-1), # minus 1 since first col is response   rounds = c(10,100,1000),   max_depth  = c(100,500,1000),   max_bin = c(100,500,1000),   cpus = c(3,7,11) )  write_tsv(cpu_testing_grid, \"cpu_test_grid.tsv\") # replace $2 with the appropriate number of cmd line input, or the path to  # the lookup read features rounds max_depth max_bin cpus < <(sed -n ${SLURM_ARRAY_TASK_ID}p \"$2\")"},{"path":[]},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/performance_testing_xgboost_on_htcf.html","id":"cpu-10k-features-10k-rounds","dir":"Articles","previous_headings":"Details > Submission rate > Submission Rate Results","what":"CPU – 10k features, 10k rounds","title":"performance_testing_xgboost_on_htcf","text":"comes submission rate approximately 84 jobs/minute. run 20,000 genes 10 fold CV fold performed separately without (stats theory based) data sharing speed ups, take approximately 1.6 days.","code":"[chasem@login xgboost_testing]$ sacct -j 2437829_1000 --format=end 2023-02-14T06:34:59   [chasem@login xgboost_testing]$ sacct -j 2437829_1 --format=submit 2023-02-14T06:23:05   [chasem@login xgboost_testing]$ date -d 2023-02-14T06:34:59 +%s 1676378099  [chasem@login xgboost_testing]$ date -d 2023-02-14T06:23:05  +%s 1676377385"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/performance_testing_xgboost_on_htcf.html","id":"cpu-81k-features-1k-rounds","dir":"Articles","previous_headings":"Details > Submission rate > Submission Rate Results","what":"CPU – 81k features, 1k rounds","title":"performance_testing_xgboost_on_htcf","text":"comes submission rate approximately 30 jobs/minute. run 20,000 genes 10 fold cross validation fold performed separately, take approximately 4.5 days rate.","code":"$ sacct -j 2409850_1000 --format=end 2023-02-12T21:33:06   $ sacct -j 2409850_1 --format=submit 2023-02-12T20:59:55   $ date -d 2023-02-12T21:33:06 +%s 1676259186  $ date -d 2023-02-12T20:59:55 +%s 1676257195"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/performance_testing_xgboost_on_htcf.html","id":"gpu-a-typical-array-10k-features-10k-rounds-max_depth-2-max_bins-default-256","dir":"Articles","previous_headings":"Details > Submission rate > Submission Rate Results","what":"GPU – a typical array: 10k features, 10k rounds, max_depth 2, max_bins default (256)","title":"performance_testing_xgboost_on_htcf","text":"going hard accept, despite fact GPU execution ~10 times fast per model, since 6 GPUs, scheduling rate slower quite lot (10x slower). Note killed array 1000 ~ 200 jobs completed pattern obvious, realized needed less jobs test comparatively far smaller number GPU comes submission rate 8.13 jobs / minute","code":"$ sacct -j 2448789_1 --format=submit 2023-02-14T21:32:21   $ sacct -j 2448789_200 --format=end 2023-02-14T21:56:57   $ date -d 2023-02-14T21:56:56 +%s 1676433416  $ date -d 2023-02-14T21:32:20 +%s 1676431940"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/performance_testing_xgboost_on_htcf.html","id":"gpu-chunked-array","dir":"Articles","previous_headings":"Details > Submission rate > Submission Rate Results","what":"GPU – chunked array","title":"performance_testing_xgboost_on_htcf","text":"occurred since model executed quickly, might better run models per resource request, instead submitting 1000 tasks separately, submit 100 tasks, 10 sequential tasks. Model: 10k features, 10k rounds, max_depth 2, max_bin default (256) comes (per model basis) 5.9 jobs / minute.","code":"$ sacct -j 2442699_100 --format=end 2023-02-14T15:46:58   $ sacct -j 2442699_1 --format=submit 2023-02-14T12:58:31  $ date -d 2023-02-14T15:46:58 +%s 1676411218  $ date -d 2023-02-14T12:58:31 +%s 1676401111"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/performance_testing_xgboost_on_htcf.html","id":"follow-ons","dir":"Articles","previous_headings":"","what":"Follow-ons","title":"performance_testing_xgboost_on_htcf","text":"None serious ‘modelling backends’ implemented R python – packages R python provide interfaces software typically written compiled language. ‘modelling backends’ R python interfaces, choice R python specific task arbitrary. However, features informed choice can made. listed . tools available one platform ease handling data hand? one classification regression statistical learning packages perform better data storage/preparation steps another? particular application, large, sparse matrix – possibly frameworks one software, others handle . built-parallelization tools provide easier path scaling?","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/performance_testing_xgboost_on_htcf.html","id":"specifically-for-xgboost","dir":"Articles","previous_headings":"Follow-ons","what":"Specifically for XGBoost","title":"performance_testing_xgboost_on_htcf","text":"(least) two implementations gradient boosting tree method worth benchmarking data XGBoost: LightGBM: Developed maintained Microsoft. benchmarked XGBoost far faster Catboost: Even faster LightGLM, also claims higher performance LightGLM XGBoost H20/GBM: Looks like software name change. According Catboost benchmarks, H20 doesn’t perform well. serious developers behind , though. Worth checking . H20 also includes ML algorithms.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/articles/performance_testing_xgboost_on_htcf.html","id":"caret-tidymodels-and-scikit-learn","dir":"Articles","previous_headings":"Follow-ons","what":"Caret, tidymodels and scikit-learn","title":"performance_testing_xgboost_on_htcf","text":"two well developed statistical learning softwares R focus -neural-nets: caret comparatively newer tidymodels. Remember real computation software written R python – interfaces – neural-net softwares largely also available R, though seem popularly used python. python, comparable package caret tidymodels scikit-learn. softwares provide structures functions facilitate following common modelling tasks: data preparation test/train split model selection evaluation hyperparameter tuning cross validation feature selection … , like drop parallelization various back ends provides interface large number ‘modelling backends’, ie xgboost, adaboost, catboost, fastglm, … . available change switch may easily compared one another modelling performance resource usage. softwares also provide built-performance enhancers, eg minimizing work n-fold CV possible sharing data. foolish rule starting coding task – time commitment learn one pay ability far far less effort.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Mateusiak Chase. Author, maintainer.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Chase M (2023). brentlabModelPerfTesting: package demonstrate R package, statistical model performance testing. R package version 0.0.0.9000, https://cmatkhan.github.io/brentlabModelPerfTesting/.","code":"@Manual{,   title = {brentlabModelPerfTesting: A package to demonstrate R package, and do statistical model performance testing},   author = {Mateusiak Chase},   year = {2023},   note = {R package version 0.0.0.9000},   url = {https://cmatkhan.github.io/brentlabModelPerfTesting/}, }"},{"path":[]},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"A package to demonstrate R package, and do statistical model performance testing","text":"goal brentlabModelPerfTesting demonstrate construct R package, provide platform perform model resource performance, eventually accuracy performance, testing local computer high performance cluster.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/index.html","id":"dependencies","dir":"","previous_headings":"","what":"Dependencies","title":"A package to demonstrate R package, and do statistical model performance testing","text":"linux os , simply use docker/singularity image. dependency docker/singularity. package depends precompiled version xgboost configured cpu gpu execution linux. Therefore, development install package via remotes::install_github, likely work linux system. might work mac. Definitely work Windows. said, Docker image (see ) work systems.","code":""},{"path":[]},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/index.html","id":"user","dir":"","previous_headings":"","what":"user","title":"A package to demonstrate R package, and do statistical model performance testing","text":"","code":"remotes::install_github('https://github.com/cmatKhan/brentlabXGBoost')"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/index.html","id":"developer","dir":"","previous_headings":"","what":"developer","title":"A package to demonstrate R package, and do statistical model performance testing","text":"","code":"git clone https://github.com/cmatKhan/brentlabXGBoost"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/index.html","id":"docker-and-singularity","dir":"","previous_headings":"","what":"docker and singularity","title":"A package to demonstrate R package, and do statistical model performance testing","text":"","code":"docker pull cmatkhan/brentlabxgboost singularity pull docker://cmatkhan/brentlabxgboost"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/perf_test_xgboost.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform time and space evaluation on xgboost models on cpu or gpu — perf_test_xgboost","title":"Perform time and space evaluation on xgboost models on cpu or gpu — perf_test_xgboost","text":"run xgboost time memory usage tracking. Purpose gather simple resource metrics, namely runtime memory usage, single model.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/perf_test_xgboost.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform time and space evaluation on xgboost models on cpu or gpu — perf_test_xgboost","text":"","code":"perf_test_xgboost(train_data, test_data, param, rounds, verbose = FALSE)"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/perf_test_xgboost.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform time and space evaluation on xgboost models on cpu or gpu — perf_test_xgboost","text":"train_data xgboost xgb.dMatrix object training data test_data xgboost xgb.dMatrix object testing data param list object certain parameters set. See xgboost documentation rounds xgboost number rounds. See xgboost documentation. major affector runtime verbose set xgboost verbosity 1 TRUE, else 0 msgs. Default FALSE","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/perf_test_xgboost.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform time and space evaluation on xgboost models on cpu or gpu — perf_test_xgboost","text":"dataframe columns time_sec, model_ram_mb, total_mem_used_gb","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/perf_test_xgboost.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Perform time and space evaluation on xgboost models on cpu or gpu — perf_test_xgboost","text":"Caret, instance, offers speed-ups make cross validation, eg, faster exploiting methods sharing data fold models. means might slightly faster run 5-fold cv using caret run 5 individual models outside caret.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/perf_test_xgboost.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform time and space evaluation on xgboost models on cpu or gpu — perf_test_xgboost","text":"","code":"test_data = readRDS(   system.file('testing_gene_data.rds',           package = 'brentlabModelPerfTesting')) # suppressWarnings only here b/c test data is too small # and stratified split is turned off. In general, do not suppressWarnings suppressWarnings({input_data = prep_data(test_data)}) #> INFO [2023-02-16 18:27:49] creating train test data with 19 predictor variables  param <- list(   objective = 'reg:squarederror',   eval_metric = 'mae',   subsample = 0.5,   nthread = 1, # expecting to be overwritten   max_depth=10, # expecting to be overwritten   max_bin = 10, # expecting to be overwritten   tree_method = 'hist')  perf_test_xgboost(input_data$train, input_data$test, param, 5) #>    time_sec model_ram_mb total_mem_used_gb #> 1 0.5981064            1              0.16  if (FALSE) { # using the gpu test_data = readRDS(   system.file('testing_gene_data.rds',           package = 'brentlabModelPerfTesting')) # suppressWarnings only here b/c test data is too small # and stratified split is turned off. In general, do not suppressWarnings suppressWarnings({input_data = prep_data(test_data)})  # this is an example using the gpu. Note that # the number of rounds has been increased so that # if you're using a nvidia gpu, you could watch this run using # watch -n0.1 nvidia-smi param <- list(   objective = 'reg:squarederror',   eval_metric = 'mae',   subsample = 0.5,   max_depth=10, # expecting to be overwritten   max_bin = 10, # expecting to be overwritten   tree_method = 'gpu_hist')  perf_test_xgboost(input_data$train, input_data$test, param, 1000) }"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/pipe.html","id":null,"dir":"Reference","previous_headings":"","what":"Pipe operator — %>%","title":"Pipe operator — %>%","text":"See magrittr::%>% details.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/pipe.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Pipe operator — %>%","text":"","code":"lhs %>% rhs"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/pipe.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Pipe operator — %>%","text":"lhs value magrittr placeholder. rhs function call using magrittr semantics.","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/pipe.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Pipe operator — %>%","text":"result calling rhs(lhs).","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/prep_data.html","id":null,"dir":"Reference","previous_headings":"","what":"prep data for the testing functions — prep_data","title":"prep data for the testing functions — prep_data","text":"prep data testing functions","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/prep_data.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"prep data for the testing functions — prep_data","text":"","code":"prep_data(gene_data, feature_num = Inf, label_vector = \"ensg00000183117_19\")"},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/prep_data.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"prep data for the testing functions — prep_data","text":"gene_data data.frame label_vector column response rest columns predictors feature_num number feature_num select data. must $>=$ 1.exceeds ncol, ncol-1 used (1 col removed label). Default use columns label_vector name column use response","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/prep_data.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"prep data for the testing functions — prep_data","text":"list xgboost data matrix objects, slots dtrain, dtest wl see xgboost docs wl. dtrain trainin data ","code":""},{"path":"https://cmatkhan.github.io/brentlabModelPerfTesting/reference/prep_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"prep data for the testing functions — prep_data","text":"","code":"test_data = readRDS(       system.file('testing_gene_data.rds',       package = 'brentlabModelPerfTesting'))   # note: suppressed warnings used here b/c the test data is too   # small to stratify. Typically, do not use supressWarnings.   suppressWarnings({prepped_data_subset = brentlabModelPerfTesting::prep_data(test_data, 10)}) #> INFO [2023-02-16 18:27:50] creating train test data with 10 predictor variables    names(prepped_data_subset) #> [1] \"train\" \"test\""}]
